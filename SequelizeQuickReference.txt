----------------------------------------------------------------------------------------------------------
 Opciones para sequelize
----------------------------------------------------------------------------------------------------------
{
  dialect: 'sqlite'        //mysql | mariadb | sqlite | postgres | mssql
  dialectModulePath: './node_modules/sqlite3'
  storage: ':memory:'     //solo sqlite
  dialectOptions: { ... } //Opciones para el modulo driver de BD
  host: 'localhost',
  port: 3333,
  protocol: 'tcp',
  define: {               //Opciones por defecto para todas las definiciones
    //Ver sig. seccion...
  },
  query: {                //Opciones por defecto para sequelize.query
  },
  set: {                  //Opciones por defecto para sequelize.set 
  },
  sync: {                 //Opciones por defecto para sequelize.sync
  },
  timezone: '-04:30'      //TZ utilizado al convertir fechas de BD a fechas de js
  logging: function(){},  //Funcion que se ejecutara siempre que sequelize vaya a logear algo
  omitNull: false,
  native: false,
  replication: false,
  pool: {
    max: 10,
    min: 1,
    idle: 60000,
    validate: function(){},
  },
  quoteIdentifiers: true,
  isolationLevel: 'REPEATABLE_READ', //"READ UNCOMMITTED" | "READ COMMITTED" |"REPEATABLE READ" | "SERIALIZABLE"
  typeValidation: false
}

----------------------------------------------------------------------------------------------------------
 Opciones de Sequelize.define
----------------------------------------------------------------------------------------------------------
{ 
  tableName: 'cliente',
  timestamps: false,
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  touchedAt: 'touchedAt',
  instanceMethods: {},
  classMethods: {},
  getterMethods: [Object],
  setterMethods: [object],
  validate: {},
  freezeTableName: true,
  underscored: false,
  underscoredAll: false,
  paranoid: false,
  whereCollection: null,
  schema: null,
  schemaDelimiter: '',
  defaultScope: null,
  scopes: [],
  hooks: {...},
  indexes: [
    {
      name: 'indexName',        //String
      type: 'UNIQUE'   |        //String
            'FULLTEXT' |
            'SPATIAL',
      method: 'BTREE' |         //String
              'HASH'  |
              'GIST'  | // (Postgres Only)
              'GIN',    // (Postgres Only)      
      unique: false,         //Boolean
      concurrently: false,   //Boolean (Postgres Only)
      fields: [
        'field1',            //Array.<String|Object>
        {
          attribute: 'fieldName',
          length:  //Indice fijo de 'length' caracteres
          order:   //direccion de ordenamiento
          collate: //Collation para la columna              
        }
    }
  ],
  name: { 
     singular: 'user', 
     plural: 'users'
  },
  omitNull: false,
  sequelize: [Object],
  uniqueKeys: [Object],
  hasPrimaryKeys: true,
  initialAutoIncrement: '',   //valor de AUTO_INCREMENT inicial para tablas
                              //de MySQL
  charset: 'utf8', 
  collate: 'utf8_latin_ci',
  engine: 'MyISAM'    
}


----------------------------------------------------------------------------------------------------------
 Definicion de Atributos
----------------------------------------------------------------------------------------------------------
{
  column1: {
    type: 'INTEGER'              //String | DataType,
    allowNull: true,             //Boolean
    defaultValue: ...,           //Any
    unique: false,               //String (composing indexes) | Boolean
    primaryKey: false,           //Boolean
    field: null,                 //String
    autoIncrement: false,        //Boolean
    comment: null,               //String
    references: {                //String | Model
      model: User,               //String | Model
      key: 'id'                  //String
    },            
    onUpdate: 'CASCADE' |        //String
              'RESTRICT' |
              'SET DEFAULT' |
              'SET NULL' |
              'NO ACTION'

    onDelete: ...,               //String
    get: function(){},
    set: function(){},
    validate: { ... }            //Validation Object
  }
  column2: ...
}


----------------------------------------------------------------------------------------------------------
 Opciones de metodos de Association
----------------------------------------------------------------------------------------------------------

hasOne:
-------
{

}


belongsTo:
----------
{
  
}


hasMany:
--------
{
  hooks: false,       
  as: 'alias',
  foreignKey: 'fkName' | {/* AttributeDef */}  
  scope:,
  onDelete:,
  onUpdate:,
  constraints:,
}


belongsToMany:
--------------
{
  
}

----------------------------------------------------------------------------------------------------------
 Atributos en Objetos de Busqueda
----------------------------------------------------------------------------------------------------------
{
  attributes: ['foo', ['bar', 'baz']] /*`foo`,`bar` AS `baz`*/                       ||
              {
                include: [ Sequelize.fn('COUNT', Sequelize.col('hats')), 'no_hats' ],   //Include gana a Exclude
                exclude: ['baz']
              }                                   

  where: ['att < ?', 25] || 
         {
           att: val             || 
                [val, val, ...] || //Clausula IN
                ['< ?', 25] ||
                { 
                  $op: val || [] {}
                } ||
           $and: [{}...] || $or: [{}...]
         }

  include: 
  [{
     model: [Object], 
     attributes: ...,   //Proyeccion en la asociacion
     where: ...         //Filtros para limitar la relacion|
     as: 'alias',       //Alias en el modelo
     include: [{},...], //Carga anticipada anidada
     required: false,   //LEFT o INNER join
     all: false,        //Carga anticipada de todas las asociaciones
     nested: false      //Junto con 'all' carga todas las asociaciones recursivamente
  },...],
  raw: false,           //Para obtener solo data pura y no instancias
  limit: 10,
  offset: 1,
  order: [ 
     'user'                                     //`user`
     ['username', 'DESC'],                      //`username` DESC
     'userage ASC',                             //`username DESC`  (mejor no usarlo)
     sequelize.fn('max', sequelize.col('age')),
     [{ raw: 'otherfunction(awesomefunction(`col`))' }, 'DESC'],
     <Model>                                    // Para ordenar la asociacion por un modelo
                                                // (Debe haberlo 'incluido' previamente)
   
  ],
  group: ... //Group tiene la misma sintaxis que order
  
  /***************************************************************************** 
    Respecto a los valores de order y group:
      - String - Seran escapados
      - Array  - Se escapa el primer elemento, el segundo se agrega verbatim
      - Object -
      - Raw    - will be added verbatim without quoting
      - Todo lo demas se ignora, y si no se establece raw, la consulta fallara
      - Sequelize.fn retorna funciones
      - Sequelize.col retorna columnas escapadas
      - Sequelize.literal retorna un texto literal
  ******************************************************************************/
  
}


----------------------------------------------------------------------------------------------------------
 Operadores para el Where en Objetos de Busqueda
----------------------------------------------------------------------------------------------------------
$and: {a: 5}           // AND (a = 5)
$or: [{a: 5}, {a: 6}]  // (a = 5 OR a = 6)
$gt: 6,                // id > 6
$gte: 6,               // id >= 6
$lt: 10,               // id < 10
$lte: 10,              // id <= 10
$ne: 20,               // id != 20
$between: [6, 10],     // BETWEEN 6 AND 10
$notBetween: [11, 15], // NOT BETWEEN 11 AND 15
$in: [1, 2],           // IN [1, 2]
$notIn: [1, 2],        // NOT IN [1, 2]
$like: '%hat',         // LIKE '%hat'
$notLike: '%hat'       // NOT LIKE '%hat'
$iLike: '%hat'         // ILIKE '%hat' (case insensitive) (PG only)
$notILike: '%hat'      // NOT ILIKE '%hat'  (PG only)
$like: { $any: ['cat', 'hat']} // LIKE ANY ARRAY['cat', 'hat'] - also works for iLike and notLike
$overlap: [1, 2]       // && [1, 2] (PG array overlap operator)
$contains: [1, 2]      // @> [1, 2] (PG array contains operator)
$contained: [1, 2]     // <@ [1, 2] (PG array contained by operator)
$any: [2,3]            // ANY ARRAY[2, 3]::INTEGER (PG only)


-----------------------------------------------------------------------------------------------------------
 Tipos de Datos
-----------------------------------------------------------------------------------------------------------
Sequelize.STRING                      // VARCHAR(255)
Sequelize.STRING(1234)                // VARCHAR(1234)
Sequelize.STRING.BINARY               // VARCHAR BINARY
Sequelize.TEXT                        // TEXT
Sequelize.INTEGER                     // INTEGER
Sequelize.BIGINT                      // BIGINT
Sequelize.BIGINT(11)                  // BIGINT(11)
Sequelize.FLOAT                       // FLOAT
Sequelize.FLOAT(11)                   // FLOAT(11)
Sequelize.FLOAT(11, 12)               // FLOAT(11,12)
Sequelize.REAL                        // REAL        PostgreSQL only.
Sequelize.REAL(11)                    // REAL(11)    PostgreSQL only.
Sequelize.REAL(11, 12)                // REAL(11,12) PostgreSQL only.
Sequelize.DOUBLE                      // DOUBLE
Sequelize.DOUBLE(11)                  // DOUBLE(11)
Sequelize.DOUBLE(11, 12)              // DOUBLE(11,12)
Sequelize.DECIMAL                     // DECIMAL
Sequelize.DECIMAL(10, 2)              // DECIMAL(10,2)
Sequelize.DATE                        // DATETIME for mysql / sqlite, TIMESTAMP WITH TIME ZONE for postgres
Sequelize.BOOLEAN                     // TINYINT(1)
Sequelize.ENUM('value 1', 'value 2')  // An ENUM with allowed values 'value 1' and 'value 2'
Sequelize.ARRAY(Sequelize.TEXT)       // Defines an array. PostgreSQL only.
Sequelize.JSON                        // JSON column. PostgreSQL only.
Sequelize.JSONB                       // JSONB column. PostgreSQL only.
Sequelize.BLOB                        // BLOB (bytea for PostgreSQL)
Sequelize.BLOB('tiny')                // TINYBLOB (bytea for PostgreSQL. Other options are medium and long)
Sequelize.UUID                        // UUID datatype for PostgreSQL and SQLite, CHAR(36) BINARY for MySQL 
                                      // ( use defaultValue: Sequelize.UUIDV1 or Sequelize.UUIDV4 to make 
                                      //   sequelize generate the ids automatically )


----------------------------------------------------------------------------------------------------------
 Validaciones
----------------------------------------------------------------------------------------------------------
is: ["^[a-z]+$",'i'],     // will only allow letters
is: /^[a-z]+$/i,          // same as the previous example using real RegExp
not: ["[a-z]",'i'],       // will not allow letters
isEmail: true,            // checks for email format (foo@bar.com)
isUrl: true,              // checks for url format (http://foo.com)
isIP: true,               // checks for IPv4 (129.89.23.1) or IPv6 format
isIPv4: true,             // checks for IPv4 (129.89.23.1)
isIPv6: true,             // checks for IPv6 format
isAlpha: true,            // will only allow letters
isAlphanumeric: true      // will only allow alphanumeric characters, so "_abc" will fail
isNumeric: true           // will only allow numbers
isInt: true,              // checks for valid integers
isFloat: true,            // checks for valid floating point numbers
isDecimal: true,          // checks for any numbers
isLowercase: true,        // checks for lowercase
isUppercase: true,        // checks for uppercase
notNull: true,            // won't allow null
isNull: true,             // only allows null
notEmpty: true,           // don't allow empty strings
equals: 'specific value', // only allow a specific value
contains: 'foo',          // force specific substrings
notIn: [['foo', 'bar']],  // check the value is not one of these
isIn: [['foo', 'bar']],   // check the value is one of these
notContains: 'bar',       // don't allow specific substrings
len: [2,10],              // only allow values with length between 2 and 10
isUUID: 4,                // only allow uuids
isDate: true,             // only allow date strings
isAfter: "2011-11-05",    // only allow date strings after a specific date
isBefore: "2011-11-05",   // only allow date strings before a specific date
max: 23,                  // only allow values
min: 23,                  // only allow values >= 23
isArray: true,            // only allow arrays
isCreditCard: true,       // check for valid credit card numbers

// Tambien pueden ponerse validaciones personalizadas:
isEven: function(value) {
  if(parseInt(value) % 2 != 0) {
    throw new Error('Solo se permiten valores pares!')
  }
}


----------------------------------------------------------------------------------------------------------
 API QuickReference
----------------------------------------------------------------------------------------------------------

Associations:
------------
  hasOne(target, [options])
  belongsTo(target, [options])
  hasMany(target, [options])
  belongsToMany(target, [options])


Hooks:
------
  addHook(hooktype, [name], fn)
  removeHook(hookType, name)
  hasHook(hookType)
  beforeValidate(name, fn)
  afterValidate(name, fn)
  beforeCreate(name, fn)
  afterCreate(name, fn)
  beforeDestroy(name, fn)
  afterDestroy(name, fn)
  beforeRestore(name, fn)
  afterRestore(name, fn)
  beforeUpdate(name, fn)
  afterUpdate(name, fn)
  beforeBulkCreate(name, fn)
  afterBulkCreate(name, fn)
  beforeBulkDestroy(name, fn)
  afterBulkDestroy(name, fn)
  beforeBulkRestore(name, fn)
  afterBulkRestore(name, fn)
  beforeBulkUpdate(name, fn)
  afterBulkUpdate(name, fn)
  beforeFind(name, fn)
  beforeFindAfterExpandIncludeAll(name, fn)
  beforeFindAfterOptions(name, fn)
  afterFind(name, fn)
  beforeDefine(name, fn)
  afterDefine(name, fn)
  beforeInit(name, fn)
  afterInit(name, fn)
  beforeSync(name, fn)
  afterSync(name, fn)
  beforeBulkSync(name, fn)
  afterBulkSync


Model: (Incluye: Hooks + Associations)
------             
  removeAttribute([attribute])
  sync()                        -> Promise.<this>
  drop([options])               -> Promise
  schema(schema, [options])     -> this
  getTableName([options])       -> String|Object
  unscoped()                    -> Model
  addScope(name, scope, [options])
  scope(options*)               -> Model
  findAll([options])            -> Promise.<Array.<Instance>>
  findById([options], ')        -> Promise.<Instance>
  findOne([options])            -> Promise.<Instance>
  aggregate(field, aggregateFunction, [options]) -> Promise.<options.dataType|object>
  count([options])              -> Promise.<Integer>
  findAndCount([findOptions])   -> Promise.<Object>
  max(field, [options])         -> Promise.<Any>
  min(field, [options])         -> Promise.<Any>
  sum(field, [options])         -> Promise.<Number>
  build(values, [options])      -> Instance
  create(values, [options])     -> Promise.<Instance>
  findOrInitialize              -> Promise.<Instance, initialized>
  findOrCreate(options)         -> Promise.<Instance, created>
  findCreateFind(options)       -> Promise.<Instance, created>
  upsert(values, [options])     -> Promise.<created>
  bulkCreate(records, [options]) -> Promise.<Array.<Instance>>
  truncate([options])           -> Promise
  destroy(options)              -> Promise.<Integer>
  restore(options)              -> Promise.<undefined>
  update(values, options)       -> Promise.<Array.<affectedCount, affectedRows>>
  describe()                    -> Promise


Instance:
---------
  isNewRecord                   -> Boolean                
  Model()                       -> Model
  sequelize()                   -> Sequelize
  where()                       -> Object
  getDataValue(key)             -> any
  setDataValue(key, value)
  get([key], [options])         -> Object|any
  set(key, value, [options])
  changed([key])                -> Boolean|Array
  previous(key)                 -> any
  save([options])               -> Promise.<this|Errors.ValidationError>
  reload([options])             -> Promise.<this>
  validate([options])           -> Promise.<Errors.ValidationError|undefined>
  update(updates, options)      -> Promise.<this>
  destroy([options={}])         -> Promise.<undefined>
  restore([options={}])         -> Promise.<undefined>
  increment(fields, [options])  -> Promise.<this>
  decrement(fields, [options])  -> Promise
  equals(other)                 -> Boolean
  equalsOneOf(others)           -> Boolean
  toJSON()                      -> object







